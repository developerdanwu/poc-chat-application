// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-kysely"
  // previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider     = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL_NON_POOLED")
  relationMode = "foreignKeys"
  // extensions   = [vector]
}

enum ChatroomStatus {
  ACTIVE
  DELETED
}

enum ChatroomSubtype {
  OPENAI_CHATROOM
  DEFAULT
}

enum ChatroomType {
  HUMAN_CHATROOM
  AI_CHATROOM
  CHATROOM_BRANCH
}

enum MessageType {
  MESSAGE
}

enum MessageStatus {
  QUEUED
  SENT
  DELIVERED
  READ
  FAILED
}

enum MessageVisibility {
  ME
  ALL
}

enum Role {
  USER
  AI
}

enum AiModel {
  OPENAI
}

enum AttachmentType {
  OPENAI_RESPONSE
}

model Message {
  clientMessageId Int               @id @default(autoincrement()) @map("client_message_id")
  text            String            @db.Text
  type            MessageType
  content         String            @db.Text
  authorId        Int               @map("author_id")
  author          Author            @relation(fields: [authorId], references: [authorId])
  chatroomId      String            @map("chatroom_id")
  chatroom        Chatroom          @relation(fields: [chatroomId], references: [id], onDelete: Cascade)
  createdAt       DateTime          @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt       DateTime          @updatedAt @map("updated_at") @db.Timestamptz(3)
  isEdited        Boolean           @default(false) @map("is_edited")
  status          MessageStatus
  visibility      MessageVisibility
  attachments     Attachment[]

  @@index([authorId])
  @@index([chatroomId])
  @@map("message")
}

model Attachment {
  attachmentId           Int            @id @default(autoincrement()) @map("attachment_id")
  Message                Message        @relation(fields: [messageClientMessageId], references: [clientMessageId])
  messageClientMessageId Int            @map("message_client_message_id")
  type                   AttachmentType @map("type")
  // embedding              Unsupported("vector(1536)")? @map("embedding")
}

model OpenAiSettings {
  id          Int         @id @default(autoincrement()) @map("id")
  temperature Float?      @default(0) @map("temperature")
  AiSettings  AiSettings?

  @@map("open_ai_settings")
}

model AiSettings {
  id               Int             @id @default(autoincrement()) @map("id")
  model            AiModel
  author           Author          @relation(fields: [authorId], references: [authorId])
  authorId         Int             @unique @map("author_id")
  openAiSettingsId Int?            @unique @map("open_ai_settings_id")
  openAiSettings   OpenAiSettings? @relation(fields: [openAiSettingsId], references: [id])
  chatroomId       String          @unique @map("chatroom_id")
  chatroom         Chatroom        @relation(fields: [chatroomId], references: [id])

  @@map("ai_settings")
}

model Author {
  firstName   String               @map("first_name")
  lastName    String               @map("last_name")
  email       String?              @unique
  authorId    Int                  @id @default(autoincrement()) @map("author_id")
  role        Role                 @map("role")
  userId      String?              @unique @map("user_id")
  messages    Message[]
  chatrooms   AuthorsOnChatrooms[]
  createdAt   DateTime             @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt   DateTime             @updatedAt @map("updated_at") @db.Timestamptz(3)
  aiUsers     Author[]             @relation("HumanUserAIUsers")
  humanUser   Author?              @relation("HumanUserAIUsers", fields: [humanUserId], references: [authorId])
  humanUserId Int?                 @map("human_user_id")
  aiSettings  AiSettings?

  @@index([authorId])
  @@map("author")
}

model AuthorsOnChatrooms {
  author     Author   @relation(fields: [authorId], references: [authorId])
  authorId   Int      @map("author_id")
  chatroom   Chatroom @relation(fields: [chatroomId], references: [id])
  chatroomId String   @map("chatroom_id")

  @@id([authorId, chatroomId])
  @@index([chatroomId])
  @@index([authorId])
  @@map("_authors_on_chatrooms")
}

model Chatroom {
  id               String               @id @default(dbgenerated("uuid_generate_v4()"))
  messages         Message[]
  type             ChatroomType         @default(HUMAN_CHATROOM)
  subtype          ChatroomSubtype      @default(DEFAULT)
  createdAt        DateTime             @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt        DateTime             @updatedAt @map("updated_at") @db.Timestamptz(3)
  authors          AuthorsOnChatrooms[]
  AiSettings       AiSettings?
  branches         Chatroom[]           @relation("ChatroomBranches")
  chatroom         Chatroom?            @relation("ChatroomBranches", fields: [chatroomBranchId], references: [id])
  chatroomBranchId String?              @map("chatroom_branch_id")
  status           ChatroomStatus       @default(ACTIVE) @map("status")

  @@map("chatroom")
}

// Slack models
model SlackChatroom {
  id                  String         @id @map("id")
  SlackMessage        SlackMessage[]
  conversationSummary String         @db.Text
}

model SlackMessage {
  id              Int                          @id @default(autoincrement()) @map("id")
  slackChatroomId String                       @map("slack_chatroom_id")
  slackChatroom   SlackChatroom                @relation(fields: [slackChatroomId], references: [id])
  text            String                       @db.Text
  embedding       Unsupported("vector(1536)")? @map("embedding")
}
