// use prisma db push to push to local dev
// supabase db diff --file [filename] to create migration file
// supabase db reset to make sure all ok
// supabase db push to apply migrations to prod

generator client {
  provider        = "prisma-kysely"
  previewFeatures = ["postgresqlExtensions", "jsonProtocol"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DATABASE_URL_NON_POOLED")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLED")
  relationMode      = "foreignKeys"
  extensions        = [uuid_ossp(map: "uuid-ossp", schema: "extensions"), vector(schema: "extensions")]
}

model Message {
  clientMessageId     Int               @id @default(autoincrement()) @map("client_message_id")
  messageChecksum     String            @map("message_checksum")
  text                String
  type                MessageType
  content             String
  authorId            Int               @map("author_id")
  chatroomId          String            @map("chatroom_id")
  createdAt           DateTime          @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt           DateTime          @updatedAt @map("updated_at") @db.Timestamptz(3)
  isEdited            Boolean           @default(false) @map("is_edited")
  status              MessageStatus
  visibility          MessageVisibility
  attachments         Attachment[]
  author              Author            @relation(fields: [authorId], references: [authorId])
  chatroom            Chatroom          @relation("ChatroomMessage", fields: [chatroomId], references: [id], onDelete: Cascade)
  lastMessageChatroom Chatroom?         @relation("LastMessageChatroomMessage")

  @@index([authorId])
  @@index([chatroomId])
  @@map("message")
}

model Attachment {
  attachmentId           Int            @id @default(autoincrement()) @map("attachment_id")
  messageClientMessageId Int            @map("message_client_message_id")
  type                   AttachmentType @map("type")
  Message                Message        @relation(fields: [messageClientMessageId], references: [clientMessageId])

  @@map("attachment")
}

model OpenAiSettings {
  id          Int         @id @default(autoincrement()) @map("id")
  temperature Float?      @default(0) @map("temperature")
  AiSettings  AiSettings?

  @@map("open_ai_settings")
}

model AiSettings {
  id               Int             @id @default(autoincrement()) @map("id")
  model            AiModel
  authorId         Int             @unique @map("author_id")
  openAiSettingsId Int?            @unique @map("open_ai_settings_id")
  chatroomId       String          @unique @map("chatroom_id")
  author           Author          @relation(fields: [authorId], references: [authorId])
  chatroom         Chatroom        @relation(fields: [chatroomId], references: [id])
  openAiSettings   OpenAiSettings? @relation(fields: [openAiSettingsId], references: [id])

  @@map("ai_settings")
}

model Author {
  firstName   String               @map("first_name")
  lastName    String               @map("last_name")
  email       String?              @unique
  authorId    Int                  @id @default(autoincrement()) @map("author_id")
  role        Role                 @map("role")
  userId      String               @unique @map("user_id")
  createdAt   DateTime             @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt   DateTime             @updatedAt @map("updated_at") @db.Timestamptz(3)
  humanUserId Int?                 @map("human_user_id")
  chatrooms   AuthorsOnChatrooms[]
  aiSettings  AiSettings?
  humanUser   Author?              @relation("HumanUserAIUsers", fields: [humanUserId], references: [authorId])
  aiUsers     Author[]             @relation("HumanUserAIUsers")
  messages    Message[]

  @@index([authorId])
  @@map("author")
}

model AuthorsOnChatrooms {
  authorId   Int      @map("author_id")
  chatroomId String   @map("chatroom_id")
  author     Author   @relation(fields: [authorId], references: [authorId])
  chatroom   Chatroom @relation(fields: [chatroomId], references: [id])

  @@id([authorId, chatroomId])
  @@index([chatroomId])
  @@index([authorId])
  @@map("_authors_on_chatrooms")
}

model Chatroom {
  id                        String               @id @default(dbgenerated("extensions.uuid_generate_v4()"))
  type                      ChatroomType         @default(HUMAN_CHATROOM)
  subtype                   ChatroomSubtype      @default(DEFAULT)
  createdAt                 DateTime             @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt                 DateTime             @updatedAt @map("updated_at") @db.Timestamptz(3)
  chatroomBranchId          String?              @map("chatroom_branch_id")
  status                    ChatroomStatus       @default(ACTIVE) @map("status")
  authors                   AuthorsOnChatrooms[]
  AiSettings                AiSettings?
  chatroom                  Chatroom?            @relation("ChatroomBranches", fields: [chatroomBranchId], references: [id])
  branches                  Chatroom[]           @relation("ChatroomBranches")
  messages                  Message[]            @relation("ChatroomMessage")
  lastUnreadMessage         Message?             @relation("LastMessageChatroomMessage", fields: [lastUnreadClientMessageId], references: [clientMessageId])
  lastUnreadClientMessageId Int?                 @unique @map("last_unread_client_message_id")

  @@map("chatroom")
}

model SlackChatroom {
  slackChatroomId     String         @id @map("slack_chatroom_id")
  conversationSummary String
  SlackMessage        SlackMessage[]

  @@map("slack_chatroom")
}

model SlackMessage {
  id              Int           @id @default(autoincrement()) @map("id")
  slackChatroomId String        @map("slack_chatroom_id")
  text            String
  createdAt       DateTime      @default(now()) @map("created_at") @db.Timestamptz(3)
  slackChatroom   SlackChatroom @relation(fields: [slackChatroomId], references: [slackChatroomId])
  updatedAt       DateTime      @updatedAt @map("updated_at") @db.Timestamptz(3)

  @@map("slack_message")
}

enum ChatroomStatus {
  ACTIVE
  DELETED
}

enum ChatroomSubtype {
  OPENAI_CHATROOM
  DEFAULT
}

enum ChatroomType {
  HUMAN_CHATROOM
  AI_CHATROOM
  CHATROOM_BRANCH
}

enum MessageType {
  MESSAGE
}

enum MessageStatus {
  QUEUED
  SENT
  DELIVERED
  FAILED
}

enum MessageVisibility {
  ME
  ALL
}

enum Role {
  USER
  AI
}

enum AiModel {
  OPENAI
}

enum AttachmentType {
  OPENAI_RESPONSE
}
