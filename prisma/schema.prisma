// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model ChatGptAiResponse {
  id              String   @id @default(cuid())
  text            String
  role            String
  name            String?
  delta           String?
  parentMessageId String?
  conversationId  String?
  Message         Message?
}

model Message {
  id                  String             @id @default(cuid())
  message             String
  senderId            String?
  aiUserSender        AiUser?            @relation(fields: [aiUserId], references: [id], onDelete: Cascade)
  chatGptAiResponse   ChatGptAiResponse? @relation(fields: [chatGptAiResponseId], references: [id])
  chatGptAiResponseId String?            @unique
  aiUserId            String?
  timestamp           DateTime           @default(now())
  chatroomId          String
  chatroom            Chatroom           @relation(fields: [chatroomId], references: [id], onDelete: Cascade)
}

model AiUser {
  id        String     @id @default(cuid())
  name      String
  created   DateTime   @default(now())
  chatrooms Chatroom[]
  aiModels  AiModel[]
  messages  Message[]
}

model AiModel {
  id       String @id
  aiUser   AiUser @relation(fields: [aiUserId], references: [id], onDelete: Cascade)
  aiUserId String
}

model Chatroom {
  id       String         @id @default(cuid())
  messages Message[]
  users    ChatroomUser[]
  aiUser   AiUser         @relation(fields: [aiUserId], references: [id], onDelete: Cascade)
  aiUserId String
}

model ChatroomUser {
  id         String   @id @default(cuid())
  chatroomId String
  userId     String
  chatroom   Chatroom @relation(fields: [chatroomId], references: [id], onDelete: Cascade)
}
